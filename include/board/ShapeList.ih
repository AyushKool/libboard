/* -*- mode: c++ -*- */
/**
 * @file   ShapeList.ih
 * @author Sebastien Fourey (GREYC)
 * @date   Sat Aug 18 2007
 *
 * @brief  Inline methods of the Transform classes.
 * \@copyright
 * This source code is part of the Board project, a C++ library whose
 * purpose is to allow simple drawings in EPS, FIG or SVG files.
 * Copyright (C) 2007 Sebastien Fourey <http://foureys.users.greyc.fr/>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#if defined( max )
#undef max
#define _HAS_MSVC_MAX_ true
#endif

ShapeList::ShapeList( int depth )
  : Shape( Color::Null, Color::Null, 1.0, SolidStyle, ButtCap, MiterJoin, depth ),
    _nextDepth( std::numeric_limits<int>::max() - 1 )
{ }

template<typename T>
T &
ShapeList::last( const std::size_t position )
{
  if ( position < _shapes.size() ) {
    std::vector<Shape*>::reverse_iterator it = _shapes.rbegin() + position;
    return dynamic_cast<T&>( *(*it) );
  } else {
    Tools::error << "Trying to access an element that does not exist ("
                 << position << "/" << _shapes.size() << ").\n";
    throw -1;
  }
}

template<typename T>
T & ShapeList::topLevelFindLast( std::size_t position )
{
  std::vector<Shape*>::iterator it = _shapes.begin();
  while ( it != _shapes.end() ) {
    if ( typeid(**it) == typeid(T) ) {
      if ( ! position ) {
        return static_cast<T&>(**it);
      } else {
        --position;
      }
    }
    ++it;
  }
  throw Exception("topLevelFindLast<T>(): no such shape type found (" + std::string(typeid(T).name()) + ")");
}

ShapeList::TopLevelIterator::TopLevelIterator(std::vector<Shape*>::iterator it)
  :_it(it)
{
}

Shape & ShapeList::TopLevelIterator::operator*()
{
  return **_it;
}

ShapeList::TopLevelIterator & ShapeList::TopLevelIterator::operator++()
{
  ++_it;
  return *this;
}

ShapeList::TopLevelIterator ShapeList::TopLevelIterator::operator++(int)
{
  TopLevelIterator previous(*this);
  ++_it;
  return previous;
}

bool ShapeList::TopLevelIterator::operator==(const TopLevelIterator & other)
{
  return _it == other._it;
}

bool ShapeList::TopLevelIterator::operator!=(const TopLevelIterator & other)
{
  return _it != other._it;
}

ShapeList::TopLevelConstIterator::TopLevelConstIterator(std::vector<Shape*>::const_iterator it)
  :_it(it)
{
}

const Shape & ShapeList::TopLevelConstIterator::operator*()
{
  return **_it;
}

ShapeList::TopLevelConstIterator & ShapeList::TopLevelConstIterator::operator++()
{
  ++_it;
  return *this;
}

ShapeList::TopLevelConstIterator ShapeList::TopLevelConstIterator::operator++(int)
{
  TopLevelConstIterator previous(*this);
  ++_it;
  return previous;
}

bool ShapeList::TopLevelConstIterator::operator==(const TopLevelConstIterator & other)
{
  return _it == other._it;
}

bool ShapeList::TopLevelConstIterator::operator!=(const TopLevelConstIterator & other)
{
  return _it != other._it;
}

ShapeList::TopLevelIterator ShapeList::begin()
{
  return TopLevelIterator(_shapes.begin());
}

ShapeList::TopLevelIterator ShapeList::end()
{
  return TopLevelIterator(_shapes.end());
}

ShapeList::TopLevelConstIterator ShapeList::begin() const
{
  return TopLevelConstIterator(_shapes.begin());
}

ShapeList::TopLevelConstIterator ShapeList::cbegin() const
{
  return TopLevelConstIterator(_shapes.begin());
}

ShapeList::TopLevelConstIterator ShapeList::end() const
{
  return TopLevelConstIterator(_shapes.end());
}

ShapeList::TopLevelConstIterator ShapeList::cend() const
{
  return TopLevelConstIterator(_shapes.end());
}

std::size_t ShapeList::size() const
{
  return _shapes.size();
}

#if defined( _HAS_MSVC_MAX_ )
#define max(A,B) ((A)>(B)?(A):(B))
#endif
